name: Build and Deploy
on:
  push:
    branches:
      - 'main'
      - 'releases/**'
      - 'develop'
    paths-ignore:
      - 'app/resources/**'
  workflow_dispatch:
env:
  ISBUILD: false
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TYPE: |-
    ${{
       github.ref_name == 'main' && ''
    || github.ref_name == 'develop'    && 'SNAPSHOT'
    || github.ref_name == 'release'    && 'RELEASE'
    ||                                'snapshot'
    }}
  ENVIRONMENT: |-
    ${{
       github.ref_name == 'main'       && 'production'
    || github.ref_name == 'develop'    && 'development'
    || github.ref_name == 'release'    && 'staging'
    ||                                'development'
    }}
jobs:
  pre-build:
    name: Prepare Metadata Pipeline
    runs-on: ubuntu-latest
    outputs:
      build_nr: ${{ steps.build_id.outputs.build_nr }}
      env_name: ${{ steps.env_id.outputs.env_name }}
      is_build: ${{ steps.is_build.outputs.is_build }}
    steps:
      - name: Extracts value Build Id
        id: build_id
        run: echo "build_nr=${{github.run_number}}-$IMAGE_TYPE" >> $GITHUB_OUTPUT
      - name: Extracts value Environment
        id: env_id
        run: echo "env_name=$ENVIRONMENT" >> $GITHUB_OUTPUT
      - name: Extracts value Is Build?
        id: is_build
        run: echo "is_build=$ISBUILD" >> $GITHUB_OUTPUT
  build:
    name: Build and Push Docker image 
    if: ${{needs.pre-build.outputs.is_build}}
    runs-on: ubuntu-latest
    permissions: write-all
    environment:
      name: ${{needs.pre-build.outputs.env_name}}
    needs: [pre-build]
    steps:
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Build with Maven
        run: mvn clean install

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        env:
          MICROSERVICES_NAME: app-ui
        with:
          context: ./${{ env.MICROSERVICES_NAME }}

          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.MICROSERVICES_NAME }}:${{needs.pre-build.outputs.build_nr}}
      
  deploy:
    name: Deploy Image Docker in Kube
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [build]
    steps:
      - name: Replacing variables in deployment.yaml file 
        uses: microsoft/variable-substitution@v1 
        with:
          files: './app-ui/deployment.yaml'
        env:
          Var1.key1: "$NAMESPACE"
          SECRET: ${{ secrets.NAMESPACE }}   
      - name: Test output
        run: cat './app-ui/deployment.yaml'
      - name: Kubectl Apply
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: apply -f ./app-ui/deployment.yaml
